// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: planet_express_service.proto

package planetexpress

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlanetExpress_GetShip_FullMethodName        = "/planetexpress.PlanetExpress/GetShip"
	PlanetExpress_GetCrew_FullMethodName        = "/planetexpress.PlanetExpress/GetCrew"
	PlanetExpress_ListDeliveries_FullMethodName = "/planetexpress.PlanetExpress/ListDeliveries"
	PlanetExpress_GetDelivery_FullMethodName    = "/planetexpress.PlanetExpress/GetDelivery"
)

// PlanetExpressClient is the client API for PlanetExpress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanetExpressClient interface {
	GetShip(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetShipResponse, error)
	GetCrew(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCrewResponse, error)
	ListDeliveries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListDeliveriesResponse, error)
	GetDelivery(ctx context.Context, in *GetDeliveryRequest, opts ...grpc.CallOption) (*GetDeliveryResponse, error)
}

type planetExpressClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanetExpressClient(cc grpc.ClientConnInterface) PlanetExpressClient {
	return &planetExpressClient{cc}
}

func (c *planetExpressClient) GetShip(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetShipResponse, error) {
	out := new(GetShipResponse)
	err := c.cc.Invoke(ctx, PlanetExpress_GetShip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planetExpressClient) GetCrew(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCrewResponse, error) {
	out := new(GetCrewResponse)
	err := c.cc.Invoke(ctx, PlanetExpress_GetCrew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planetExpressClient) ListDeliveries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListDeliveriesResponse, error) {
	out := new(ListDeliveriesResponse)
	err := c.cc.Invoke(ctx, PlanetExpress_ListDeliveries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planetExpressClient) GetDelivery(ctx context.Context, in *GetDeliveryRequest, opts ...grpc.CallOption) (*GetDeliveryResponse, error) {
	out := new(GetDeliveryResponse)
	err := c.cc.Invoke(ctx, PlanetExpress_GetDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanetExpressServer is the server API for PlanetExpress service.
// All implementations must embed UnimplementedPlanetExpressServer
// for forward compatibility
type PlanetExpressServer interface {
	GetShip(context.Context, *empty.Empty) (*GetShipResponse, error)
	GetCrew(context.Context, *empty.Empty) (*GetCrewResponse, error)
	ListDeliveries(context.Context, *empty.Empty) (*ListDeliveriesResponse, error)
	GetDelivery(context.Context, *GetDeliveryRequest) (*GetDeliveryResponse, error)
	mustEmbedUnimplementedPlanetExpressServer()
}

// UnimplementedPlanetExpressServer must be embedded to have forward compatible implementations.
type UnimplementedPlanetExpressServer struct {
}

func (UnimplementedPlanetExpressServer) GetShip(context.Context, *empty.Empty) (*GetShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShip not implemented")
}
func (UnimplementedPlanetExpressServer) GetCrew(context.Context, *empty.Empty) (*GetCrewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrew not implemented")
}
func (UnimplementedPlanetExpressServer) ListDeliveries(context.Context, *empty.Empty) (*ListDeliveriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeliveries not implemented")
}
func (UnimplementedPlanetExpressServer) GetDelivery(context.Context, *GetDeliveryRequest) (*GetDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelivery not implemented")
}
func (UnimplementedPlanetExpressServer) mustEmbedUnimplementedPlanetExpressServer() {}

// UnsafePlanetExpressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanetExpressServer will
// result in compilation errors.
type UnsafePlanetExpressServer interface {
	mustEmbedUnimplementedPlanetExpressServer()
}

func RegisterPlanetExpressServer(s grpc.ServiceRegistrar, srv PlanetExpressServer) {
	s.RegisterService(&PlanetExpress_ServiceDesc, srv)
}

func _PlanetExpress_GetShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanetExpressServer).GetShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanetExpress_GetShip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanetExpressServer).GetShip(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanetExpress_GetCrew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanetExpressServer).GetCrew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanetExpress_GetCrew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanetExpressServer).GetCrew(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanetExpress_ListDeliveries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanetExpressServer).ListDeliveries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanetExpress_ListDeliveries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanetExpressServer).ListDeliveries(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanetExpress_GetDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanetExpressServer).GetDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanetExpress_GetDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanetExpressServer).GetDelivery(ctx, req.(*GetDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanetExpress_ServiceDesc is the grpc.ServiceDesc for PlanetExpress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanetExpress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "planetexpress.PlanetExpress",
	HandlerType: (*PlanetExpressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShip",
			Handler:    _PlanetExpress_GetShip_Handler,
		},
		{
			MethodName: "GetCrew",
			Handler:    _PlanetExpress_GetCrew_Handler,
		},
		{
			MethodName: "ListDeliveries",
			Handler:    _PlanetExpress_ListDeliveries_Handler,
		},
		{
			MethodName: "GetDelivery",
			Handler:    _PlanetExpress_GetDelivery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "planet_express_service.proto",
}
